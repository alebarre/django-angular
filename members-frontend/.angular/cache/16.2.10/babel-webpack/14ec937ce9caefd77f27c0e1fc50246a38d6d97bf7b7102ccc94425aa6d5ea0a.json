{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000/';\n    this.httpHeaders = new HttpHeaders({\n      'COntent-Type': 'application/json'\n    });\n  }\n  getAllMembers() {\n    return this.http.get(this.baseUrl + 'members/', {\n      headers: this.httpHeaders\n    });\n  }\n  getMember(id) {\n    return this.http.get(this.baseUrl + 'members/' + id + '/', {\n      headers: this.httpHeaders\n    });\n  }\n  updateMember(member) {\n    let body = {\n      name: member.name,\n      surname: member.surname,\n      phone: member.phone,\n      adress: member.adress\n    };\n    return this.http.put(this.baseUrl + 'members/' + member.id + '/', body, {\n      headers: this.httpHeaders\n    });\n  }\n  saveMember(member) {\n    return this.http.post(this.baseUrl + 'members/', member, {\n      headers: this.httpHeaders\n    });\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","ApiService","constructor","http","baseUrl","httpHeaders","getAllMembers","get","headers","getMember","id","updateMember","member","body","name","surname","phone","adress","put","saveMember","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aleba\\Projects\\angular\\members\\members-frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private baseUrl = 'http://localhost:8000/'\n\n  httpHeaders = new HttpHeaders({'COntent-Type' : 'application/json'});\n\n  constructor(private http: HttpClient) { }\n\n  getAllMembers(): Observable<any> {\n    return this.http.get(this.baseUrl + 'members/', {headers: this.httpHeaders})\n  }\n\n  getMember(id: any): Observable<any>{\n    return this.http.get(this.baseUrl + 'members/' + id + '/', {headers: this.httpHeaders})\n  }\n\n  updateMember(member: any): Observable<any>{\n    let body = {  name: member.name,\n                  surname: member.surname,\n                  phone: member.phone,\n                  adress: member.adress }\n    return this.http.put(this.baseUrl + 'members/' + member.id + '/', body, {headers: this.httpHeaders})\n  }\n\n  saveMember(member: any):Observable<any> {\n    return this.http.post(this.baseUrl + 'members/', member, {headers: this.httpHeaders})\n  }\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,OAAO,GAAG,wBAAwB;IAE1C,KAAAC,WAAW,GAAG,IAAIL,WAAW,CAAC;MAAC,cAAc,EAAG;IAAkB,CAAC,CAAC;EAE5B;EAExCM,aAAaA,CAAA;IACX,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACH,OAAO,GAAG,UAAU,EAAE;MAACI,OAAO,EAAE,IAAI,CAACH;IAAW,CAAC,CAAC;EAC9E;EAEAI,SAASA,CAACC,EAAO;IACf,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAC,IAAI,CAACH,OAAO,GAAG,UAAU,GAAGM,EAAE,GAAG,GAAG,EAAE;MAACF,OAAO,EAAE,IAAI,CAACH;IAAW,CAAC,CAAC;EACzF;EAEAM,YAAYA,CAACC,MAAW;IACtB,IAAIC,IAAI,GAAG;MAAGC,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,OAAO,EAAEH,MAAM,CAACG,OAAO;MACvBC,KAAK,EAAEJ,MAAM,CAACI,KAAK;MACnBC,MAAM,EAAEL,MAAM,CAACK;IAAM,CAAE;IACrC,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,IAAI,CAACd,OAAO,GAAG,UAAU,GAAGQ,MAAM,CAACF,EAAE,GAAG,GAAG,EAAEG,IAAI,EAAE;MAACL,OAAO,EAAE,IAAI,CAACH;IAAW,CAAC,CAAC;EACtG;EAEAc,UAAUA,CAACP,MAAW;IACpB,OAAO,IAAI,CAACT,IAAI,CAACiB,IAAI,CAAC,IAAI,CAAChB,OAAO,GAAG,UAAU,EAAEQ,MAAM,EAAE;MAACJ,OAAO,EAAE,IAAI,CAACH;IAAW,CAAC,CAAC;EACvF;EAAC,QAAAgB,CAAA,G;qBA1BUpB,UAAU,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVzB,UAAU;IAAA0B,OAAA,EAAV1B,UAAU,CAAA2B,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}